// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// initialize_from_hdf5
SEXP initialize_from_hdf5(std::string file, std::string name, size_t nrow, size_t ncol, bool byrow, bool forced);
RcppExport SEXP _arbalest_initialize_from_hdf5(SEXP fileSEXP, SEXP nameSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP byrowSEXP, SEXP forcedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< size_t >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< bool >::type byrow(byrowSEXP);
    Rcpp::traits::input_parameter< bool >::type forced(forcedSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_from_hdf5(file, name, nrow, ncol, byrow, forced));
    return rcpp_result_gen;
END_RCPP
}
// initialize_from_memory
SEXP initialize_from_memory(Rcpp::RObject x, Rcpp::RObject i, Rcpp::RObject p, int nrow, int ncol, bool byrow);
RcppExport SEXP _arbalest_initialize_from_memory(SEXP xSEXP, SEXP iSEXP, SEXP pSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP byrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< bool >::type byrow(byrowSEXP);
    rcpp_result_gen = Rcpp::wrap(initialize_from_memory(x, i, p, nrow, ncol, byrow));
    return rcpp_result_gen;
END_RCPP
}
// apply_subset
SEXP apply_subset(SEXP input, Rcpp::IntegerVector subset, bool row);
RcppExport SEXP _arbalest_apply_subset(SEXP inputSEXP, SEXP subsetSEXP, SEXP rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type subset(subsetSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_subset(input, subset, row));
    return rcpp_result_gen;
END_RCPP
}
// apply_transpose
SEXP apply_transpose(SEXP input);
RcppExport SEXP _arbalest_apply_transpose(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_transpose(input));
    return rcpp_result_gen;
END_RCPP
}
// apply_bind
SEXP apply_bind(Rcpp::List input, bool row);
RcppExport SEXP _arbalest_apply_bind(SEXP inputSEXP, SEXP rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_bind(input, row));
    return rcpp_result_gen;
END_RCPP
}
// apply_addition
SEXP apply_addition(SEXP input, Rcpp::NumericVector val, bool row);
RcppExport SEXP _arbalest_apply_addition(SEXP inputSEXP, SEXP valSEXP, SEXP rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_addition(input, val, row));
    return rcpp_result_gen;
END_RCPP
}
// apply_multiplication
SEXP apply_multiplication(SEXP input, Rcpp::NumericVector val, bool row);
RcppExport SEXP _arbalest_apply_multiplication(SEXP inputSEXP, SEXP valSEXP, SEXP rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_multiplication(input, val, row));
    return rcpp_result_gen;
END_RCPP
}
// apply_subtraction
SEXP apply_subtraction(SEXP input, Rcpp::NumericVector val, bool right, bool row);
RcppExport SEXP _arbalest_apply_subtraction(SEXP inputSEXP, SEXP valSEXP, SEXP rightSEXP, SEXP rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< bool >::type right(rightSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_subtraction(input, val, right, row));
    return rcpp_result_gen;
END_RCPP
}
// apply_division
SEXP apply_division(SEXP input, Rcpp::NumericVector val, bool right, bool row);
RcppExport SEXP _arbalest_apply_division(SEXP inputSEXP, SEXP valSEXP, SEXP rightSEXP, SEXP rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< bool >::type right(rightSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_division(input, val, right, row));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_arbalest_initialize_from_hdf5", (DL_FUNC) &_arbalest_initialize_from_hdf5, 6},
    {"_arbalest_initialize_from_memory", (DL_FUNC) &_arbalest_initialize_from_memory, 6},
    {"_arbalest_apply_subset", (DL_FUNC) &_arbalest_apply_subset, 3},
    {"_arbalest_apply_transpose", (DL_FUNC) &_arbalest_apply_transpose, 1},
    {"_arbalest_apply_bind", (DL_FUNC) &_arbalest_apply_bind, 2},
    {"_arbalest_apply_addition", (DL_FUNC) &_arbalest_apply_addition, 3},
    {"_arbalest_apply_multiplication", (DL_FUNC) &_arbalest_apply_multiplication, 3},
    {"_arbalest_apply_subtraction", (DL_FUNC) &_arbalest_apply_subtraction, 4},
    {"_arbalest_apply_division", (DL_FUNC) &_arbalest_apply_division, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_arbalest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
