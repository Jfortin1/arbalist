% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/saveTileMatrix.R
\name{saveTileMatrix}
\alias{saveTileMatrix}
\title{Save a tile count matrix}
\usage{
saveTileMatrix(
  fragment.file,
  output.file,
  output.name,
  seq.lengths = NULL,
  barcodes = NULL,
  tile.size = 500,
  compress.level = 6,
  chunk.dim = 20000
)
}
\arguments{
\item{fragment.file}{String containing a path to a fragment file.}

\item{output.file}{String containing a path to an output HDF5 file.
If none exists, one will be created.}

\item{output.name}{String containing the name of the group inside \code{output.file}, in which to save the matrix contents.}

\item{seq.lengths}{Named integer vector containing the lengths of the reference sequences used for alignment.
Vector names should correspond to the names of the sequences, in the same order of occurrence as in the fragment file.
If \code{NULL}, this is obtained from the reference genome used by Cellranger (itself located by scanning the header of the fragment file).}

\item{barcodes}{Character vector of cell barcodes to extract, e.g., based on the filtered cells reported by Cellranger.
If \code{NULL}, all barcodes are extracted, though this is usually undesirable as not all barcodes correspond to cell-containing droplets.}

\item{tile.size}{Integer scalar specifying the size of the tiles in base pairs.}

\item{compress.level}{Integer scalar specifying the Zlib compression level to use.}

\item{chunk.dim}{Integer scalar specifying the size of the chunks (in terms of the number of elements) inside the HDF5 file.}
}
\value{
A sparse matrix is saved to \code{output.file} using the 10X HDF5 format.
A list is returned containing:
\itemize{
\item \code{tiles}, a GRanges object containing the tile coordinates.
\item \code{counts} A \linkS4class{H5SparseMatrix} referencing the \code{outputfile}, where the rows correspond to entries of \code{tiles}.
Column names are set to the cell barcodes - if \code{barcodes} is supplied, this is directly used as the column names.
}
}
\description{
Count the number of fragment start/end positions within genomic tiles for each cell, using the fragment file generated by Cellranger.
Then, save the resulting matrix into a HDF5 file.
}
\details{
We count the overlap with the start/end positions of each fragment, not the overlap with the fragment interval itself.
This is because the fragment start/ends represent the transposase cleavage events, while the fragment interval has no real biological significance.

If the start and end for the same fragment overlap different tiles, the counts for both tiles are incremented by 1. 
This reflects the fact that these positions represent distinct transposase cleavage events for different features.
However, if the start and end for the same fragment overlap the same tile, the tile's count is only incremented by 1. 
This ensures that the count for each entry of \code{regions} still follows Poisson noise and avoids an artificial enrichment of even counts.
}
\examples{
# Mocking up the fragment file.
seq.lengths <- c(chrA = 2000, chrB = 10000)
temp <- tempfile(fileext = ".gz")
mockFragmentFile(temp, seq.lengths, 1e3, cell.names = LETTERS)

# Running the counter
out <- tempfile(fileext=".h5")
counted <- saveTileMatrix(temp, output.file=out, output.name="WHEE", seq.lengths=seq.lengths)
counted

}
\author{
Aaron Lun
}
